#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("chatapp:server");
const http = require("http");
const dotenv = require("dotenv");
dotenv.config();

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "7575");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`Server listening to port: ${port}`));
server.on("error", onError);
server.on("listening", onListening);

/**
 * Socket IO integration
 */
const io = require("socket.io").listen(server);
require("../io")(io);

// function socketGlobal() {
//   const io = require('socket.io').listen(server)
//   require('../socket/socket')(io)

//   // const io = require('socket.io')()
//   // global.globalSocket = io.attach(server)
// }

// socketGlobal()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

async function connect() {
  const r = require("rethinkdb");

  global.connection = await r.connect({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    db: process.env.DB_NAME,
  });

  // create database if doesn't exist
  await r
    .dbList()
    .contains(process.env.DB_NAME)
    .do(function (databaseExists) {
      return r.branch(
        databaseExists,
        { dbs_created: 0 },
        r.dbCreate(process.env.DB_NAME)
      );
    })
    .run(connection);

  // create users table if doesn't exist
  await r
    .tableList()
    .contains("users")
    .do(function (tableExists) {
      return r.branch(tableExists, { table_created: 0 }, r.tableCreate("users"));
    })
    .run(connection);

  // create messages table if doesn't exist
  await r
    .tableList()
    .contains("messages")
    .do(function (tableExists) {
      return r.branch(tableExists, { table_created: 0 }, r.tableCreate("messages"));
    })
    .run(connection);
}

connect();
